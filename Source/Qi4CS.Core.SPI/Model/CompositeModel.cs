/*
 * Copyright 2011 Stanislav Muhametsin. All rights Reserved.
 *
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using CollectionsWithRoles.API;
using CommonUtils;
using Qi4CS.Core.API.Instance;
using Qi4CS.Core.SPI.Common;
using Qi4CS.Core.SPI.Instance;
using Qi4CS.Core.SPI.Model;

namespace Qi4CS.Core.SPI.Model
{
   /// <summary>
   /// This model contains all the required information about a single composite.
   /// </summary>
   public interface CompositeModel : UsesProviderQuery, ValidatableItem
   {
      /// <summary>
      /// Gets the <see cref="CompositeModelType"/> of this <see cref="CompositeModel"/>.
      /// </summary>
      /// <value>The <see cref="CompositeModelType"/> of this <see cref="CompositeModel"/>.</value>
      CompositeModelType ModelType { get; }

      /// <summary>
      /// Gets all the types publicly visible to outside of the composite.
      /// </summary>
      /// <value>All the types publicly visible to outside of the composite.</value>
      SetQuery<Type> PublicTypes { get; }

      /// <summary>
      /// Gets all the <see cref="CompositeMethodModel"/>s of this <see cref="CompositeModel"/>.
      /// </summary>
      /// <value>All the <see cref="CompositeMethodModel"/>s of this <see cref="CompositeModel"/>.</value>
      /// <remarks>The result includes also models of methods from private composite types.</remarks>
      ListQuery<CompositeMethodModel> Methods { get; }

      /// <summary>
      /// Gets all the <see cref="FieldModel"/>s of this <see cref="CompositeModel"/>.
      /// </summary>
      /// <value>All the <see cref="FieldModel"/>s of this <see cref="CompositeModel"/>.</value>
      /// <remarks>The result includes also models of fields from fragments of private composite types.</remarks>
      ListQuery<FieldModel> Fields { get; }

      /// <summary>
      /// Gets all the <see cref="ConstructorModel"/>s of this <see cref="CompositeModel"/>.
      /// </summary>
      /// <value>All the <see cref="ConstructorModel"/>s of this <see cref="CompositeModel"/>.</value>
      /// <remarks>The result includes also models of constructors from fragments of private composite types.</remarks>
      ListQuery<ConstructorModel> Constructors { get; }

      /// <summary>
      /// Gets all the <see cref="SpecialMethodModel"/>s of this <see cref="CompositeModel"/>.
      /// </summary>
      /// <value>All the <see cref="SpecialMethodModel"/>s of this <see cref="CompositeModel"/>.</value>
      /// <remarks>The result includes also models of special methods from fragments of private composite types.</remarks>
      ListQuery<SpecialMethodModel> SpecialMethods { get; }

      /// <summary>
      /// Gets the <see cref="UsesContainerQuery"/> associated with this <see cref="CompositeModel"/> containing.
      /// </summary>
      /// <value>the <see cref="UsesContainerQuery"/> associated with this <see cref="CompositeModel"/>.</value>
      UsesContainerQuery UsesContainer { get; }

      /// <summary>
      /// Gets the <see cref="Model.ApplicationModel{T}"/> this <see cref="CompositeModel"/> belongs to.
      /// </summary>
      /// <value>The <see cref="Model.ApplicationModel{T}"/> this <see cref="CompositeModel"/> belongs to.</value>
      ApplicationModel<ApplicationSPI> ApplicationModel { get; }

      /// <summary>
      /// Gets the composite ID unique within the <see cref="Model.ApplicationModel{T}"/> this <see cref="CompositeModel"/> belongs to.
      /// </summary>
      /// <value>The composite ID unique within the <see cref="Model.ApplicationModel{T}"/> this <see cref="CompositeModel"/> belongs to.</value>
      Int32 CompositeModelID { get; }

      /// <summary>
      /// Gets one type from the <see cref="PublicTypes"/> considered to be 'main' type.
      /// This will affect things like e.g. code generation.
      /// </summary>
      /// <value>One type from the <see cref="PublicTypes"/> considered to be 'main' type.</value>
      /// <example>
      /// Let's assume one has assemblies <c>A</c> and <c>B</c>, with types <c>TA</c> and <c>TB</c>, respectively, and both of the types are in <see cref="PublicTypes"/> of this <see cref="CompositeModel"/>.
      /// The code generated by Qi4CS will be split into two assemblies, let's call them <c>A.Q</c> for <c>A</c> and <c>B.Q</c> for <c>B</c>.
      /// The <c>A.Q</c> will contain type related to <c>TA</c>, let's call it <c>TA_Q</c>, and <c>B.Q</c> will contain type related to <c>TB</c>, let's call it <c>TB_Q</c>.
      /// Let's also assume that both <c>TA</c> and <c>TB</c> contain properties that end up in being part of composite state, meaning that the mixin for them will come from <c>Qi4CS.Core</c> assembly.
      /// If <see cref="MainCodeGenerationType"/> is then <c>TA</c>, the type <c>TA_Q</c> in assembly <c>A.Q</c> will contain generated type related to the mixin.
      /// Consequetively, if <see cref="MainCodeGenerationType"/> is <c>TB</c>, the type <c>TB_Q</c> in assembly <c>B.Q</c> will contain generated type related to the mixin.
      /// </example>
      Type MainCodeGenerationType { get; }

      /// <summary>
      /// This event will be invoked whenever an instance of the composite of this <see cref="CompositeModel"/> is created by the <see cref="API.Instance.CompositeBuilder.InstantiateWithType(Type)"/> method.
      /// </summary>
      /// <seealso cref="CompositeModelInstantiationArgs"/>
      event EventHandler<CompositeModelInstantiationArgs> CompositeInstantiated;
   }

   /// <summary>
   /// This is event args class for <see cref="CompositeModel.CompositeInstantiated"/> event.
   /// </summary>
   public sealed class CompositeModelInstantiationArgs : EventArgs
   {
      private readonly CompositeInstance _instance;

      /// <summary>
      /// Creates a new instance of <see cref="CompositeModelInstantiationArgs"/>.
      /// </summary>
      /// <param name="instance">The <see cref="CompositeInstance"/> of the composite that was instantiated.</param>
      /// <exception cref="ArgumentNullException">If <paramref name="instance"/> is <c>null</c>.</exception>
      public CompositeModelInstantiationArgs( CompositeInstance instance )
      {
         ArgumentValidator.ValidateNotNull( "Composite instance", instance );

         this._instance = instance;
      }

      /// <summary>
      /// Gets the <see cref="CompositeInstance"/> of the composite that was instantiated.
      /// </summary>
      /// <value>The <see cref="CompositeInstance"/> of the composite that was instantiated.</value>
      public CompositeInstance CompositeInstance
      {
         get
         {
            return this._instance;
         }
      }
   }
}

public static partial class E_Qi4CS
{
   /// <summary>
   /// Gets enumerable of all fragment types of given <see cref="CompositeModel"/>.
   /// </summary>
   /// <param name="model">The <see cref="CompositeModel"/>.</param>
   /// <returns>Enumerable of all fragment types of given <paramref name="model"/>.</returns>
   /// <exception cref="NullReferenceException">If <paramref name="model"/> is <c>null</c>.</exception>
   public static IEnumerable<Type> GetAllFragmentTypes( this CompositeModel model )
   {
      return model.Methods
            .SelectMany( cMethod => cMethod.GetAllMethodModels().OfType<AbstractMethodModelWithFragment>() )
            .Concat( model.SpecialMethods )
            .GroupBy( mModel => mModel.GetType() )
            .SelectMany( grp => grp.Select( mModel => mModel.FragmentType ).GetBottomTypes() )
            .Distinct();
   }

   /// <summary>
   /// Gets enumerable of all composite types, including private composite types, of given <see cref="CompositeModel"/>.
   /// </summary>
   /// <param name="model">The <see cref="CompositeModel"/>.</param>
   /// <returns>Enumerable of all composite types, including private composites types, of given <paramref name="model"/>.</returns>
   /// <exception cref="NullReferenceException">If <paramref name="model"/> is <c>null</c>.</exception>
   public static IEnumerable<Type> GetAllCompositeTypes( this CompositeModel model )
   {
      return model.Methods
         .Select( cMethod => cMethod.NativeInfo.DeclaringType )
         .Concat( model.PublicTypes )
         .Concat( model.GetAllInjectableModelsWithInjectionScope<Qi4CS.Core.API.Model.ThisAttribute>().Select( i => i.TargetType ) )
         .GetBottomTypes();
   }

   /// <summary>
   /// Gets enumerable of all <see cref="ConstraintModel"/>s of given <see cref="CompositeModel"/>.
   /// </summary>
   /// <param name="model">The <see cref="CompositeModel"/>.</param>
   /// <returns>Enumerable of all <see cref="ConstraintModel"/>s of given <paramref name="model"/>.</returns>
   /// <exception cref="NullReferenceException">If <paramref name="model"/> is <c>null</c>.</exception>
   public static IEnumerable<ConstraintModel> GetAllConstraints( this CompositeModel model )
   {
      return model.Methods
         .SelectMany( method => method.Parameters.SelectMany( param => param.Constraints ) )
         .Concat( model.Constructors.SelectMany( ctor => ctor.Parameters.SelectMany( param => param.Constraints ) ) )
         .Concat( model.SpecialMethods.SelectMany( method => method.Parameters.SelectMany( param => param.Constraints ) ) )
         .Concat( model.Methods.SelectMany( method => method.Result.Constraints ) )
         .Concat( model.SpecialMethods.SelectMany( method => method.ResultModel.Constraints ) );
   }

   /// <summary>
   /// Gets enumerable of all <see cref="AbstractInjectableModel"/>s of given <see cref="CompositeModel"/>.
   /// </summary>
   /// <param name="model">The <see cref="CompositeModel"/>.</param>
   /// <returns>Enumerable of all <see cref="AbstractInjectableModel"/>s of given <paramref name="model"/>.</returns>
   /// <exception cref="NullReferenceException">If <paramref name="model"/> is <c>null</c>.</exception>
   public static IEnumerable<AbstractInjectableModel> GetAllInjectableModels( this CompositeModel model )
   {
      return model.Fields
         .Cast<AbstractInjectableModel>()
         .Concat( model.Constructors.SelectMany( ctor => ctor.Parameters ) )
         .Concat( model.Methods.SelectMany( method => method.Parameters ) )
         .Concat( model.SpecialMethods.SelectMany( method => method.Parameters ) );
   }

   /// <summary>
   /// Filters result of <see cref="GetAllInjectableModels(CompositeModel)"/> so that it contains only models with their <see cref="AbstractInjectableModel.InjectionScope"/> of type <typeparamref name="TInjectionScope"/>.
   /// </summary>
   /// <typeparam name="TInjectionScope">The type of the injection scope attribute.</typeparam>
   /// <param name="model">The <see cref="AbstractInjectableModel"/>.</param>
   /// <returns>Filtered result of <see cref="GetAllInjectableModels(CompositeModel)"/> so that it contains only models with their <see cref="AbstractInjectableModel.InjectionScope"/> of type <typeparamref name="TInjectionScope"/>.</returns>
   /// <exception cref="NullReferenceException">If <paramref name="model"/> is <c>null</c>.</exception>
   public static IEnumerable<AbstractInjectableModel> GetAllInjectableModelsWithInjectionScope<TInjectionScope>( this CompositeModel model )
   {
      return GetAllInjectableModels( model ).Where( iModel => iModel.InjectionScope is TInjectionScope );
   }

   /// <summary>
   /// Gets enumerable of all <see cref="PropertyModel"/>s of given <see cref="CompositeModel"/>.
   /// </summary>
   /// <param name="model">The <see cref="CompositeModel"/>.</param>
   /// <returns>Enumerable of all <see cref="PropertyModel"/>s of given <paramref name="model"/>.</returns>
   /// <exception cref="NullReferenceException">If <paramref name="model"/> is <c>null</c>.</exception>
   public static IEnumerable<PropertyModel> GetAllPropertyModels( this CompositeModel model )
   {
      return model.Methods.Select( method => method.PropertyModel ).Where( pModel => pModel != null ).Distinct();
   }

   /// <summary>
   /// Gets enumerable of all <see cref="EventModel"/>s of given <see cref="CompositeModel"/>.
   /// </summary>
   /// <param name="model">The <see cref="CompositeModel"/>.</param>
   /// <returns>Enumerable of all <see cref="EventModel"/>s of given <paramref name="model"/>.</returns>
   /// <exception cref="NullReferenceException">If <paramref name="model"/> is <c>null</c>.</exception>
   public static IEnumerable<EventModel> GetAllEventModels( this CompositeModel model )
   {
      return model.Methods.Select( method => method.EventModel ).Where( eModel => eModel != null ).Distinct();
   }
}
